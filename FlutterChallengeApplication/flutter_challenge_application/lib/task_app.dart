import 'package:flutter/material.dart';
// A sample application generated by ChatGPT

class TaskApp extends StatefulWidget {
  const TaskApp({Key? key}) : super(key: key);

  @override
  State<TaskApp> createState() => _TaskAppState();
}

class _TaskAppState extends State<TaskApp> {
  List<Task> tasks = [];
  void addTask(String title) {
    setState(() {
      tasks.add(Task(id: DateTime.now().toString(), title: title));
    });
  }

  void toggleTaskCompletion(Task task) {
    setState(() {
      task.isCompleted = !task.isCompleted;
    });
  }

  void deleteTask(Task task) {
    setState(() {
      tasks.remove(task);
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text("Tasks list"),
        ),
        body: Column(
          children: <Widget>[
            TaskForm(addTask),
            TaskList(tasks: tasks, toggleTaskCompletion: toggleTaskCompletion, deleteTask: deleteTask)
          ],
        ),
      ),
    );
  }
}

class Task {
  final String id;
  final String title;
  bool isCompleted;

  Task({required this.id, required this.title, this.isCompleted = false});
}


class TaskList extends StatelessWidget {
  final List<Task> tasks;
  final Function(Task) toggleTaskCompletion;
  final Function(Task) deleteTask;
  const TaskList({Key? key, required this.tasks, required this.toggleTaskCompletion, required this.deleteTask}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: ListView.builder(
        itemCount: tasks.length,
        itemBuilder: (context, index) {
          final task = tasks[index];
          return ListTile(
            title: Text(task.title),
            trailing: IconButton(
              icon: const Icon(Icons.delete),
              onPressed: () => deleteTask(task),
            ),
            onTap: () => toggleTaskCompletion(task),
            leading: task.isCompleted
                ? const Icon(Icons.check_box)
                : const Icon(Icons.check_box_outline_blank),
          );
        },
      ),
    );
  }
}


class TaskForm extends StatefulWidget {
  final Function(String) addTask;
  const TaskForm(this.addTask, {super.key});

  @override
  State<TaskForm> createState() => _TaskFormState();
}

class _TaskFormState extends State<TaskForm> {

  final formKey = GlobalKey<FormState>();
  final titleController = TextEditingController();

  @override
  void dispose() {
    titleController.dispose();
    super.dispose();
  }

  void submitForm() {
    if(formKey.currentState!.validate()) {
      widget.addTask(titleController.text);
      titleController.clear();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: formKey,
        child: Row(
          children: <Widget>[
            Expanded(
              child: TextFormField(
                controller: titleController,
                decoration: const InputDecoration(
                  labelText: "Task",
                ),
                validator: (value) {
                  if(value!.isEmpty) {
                    return 'Please, insert a task';
                  }
                  return null;
                },
              ),
            ),
            const SizedBox(width: 10.0,),
            ElevatedButton(onPressed: submitForm, child: const Text("Add"))
          ],
        ),
      ),
    );
  }
}